{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dnrm2.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport abs from '@stdlib/math-base-special-abs';\nimport abs2 from '@stdlib/math-base-special-abs2';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.4916681462400413E-154;\nvar tbig = 1.9979190722022350E+146;\nvar ssml = 4.4989137945431964E+161;\nvar sbig = 1.1113793747425387E-162;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = dnrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnrm2( N, x, stride, offset ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( x[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig += abs2( ax * sbig );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax * ssml );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += ( ax * ax );\n\t\t}\n\t\tix += stride;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT64_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig += ( ( amed * sbig ) * sbig );\n\t\t}\n\t\tscl = 1.0 / sbig;\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT64_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / ssml;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = ( ymax * ymax ) * ( 1.0 + abs2( ymin / ymax ) );\n\t\t} else {\n\t\t\tscl = 1.0 / ssml;\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn sqrt( sumsq ) * scl;\n}\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a double-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var out = dnrm2( 3, x, 1 );\n* // returns 3.0\n*/\nfunction dnrm2( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default dnrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dnrm2 from './dnrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnrm2;\n"],"names":["tsml","tbig","ssml","sbig","dnrm2","N","x","stride","offset","notbig","sumsq","abig","amed","asml","ymax","ymin","scl","ax","ix","i","abs","abs2","FLOAT64_MAX","sqrt","ndarray","stride2offset","setReadOnly"],"mappings":";;+lBA+BA,IAAIA,EAAO,uBACPC,EAAO,qBACPC,EAAO,sBACPC,EAAO,uBAsBX,SAASC,EAAOC,EAAGC,EAAGC,EAAQC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKd,GAAK,EACT,OAAO,EAcR,IAZAa,EAAKV,EAGLC,GAAS,EAETC,EAAQ,EACRC,EAAO,EACPC,EAAO,EACPC,EAAO,EACPG,EAAM,EAGAG,EAAI,EAAGA,EAAId,EAAGc,KACnBF,EAAKG,EAAKd,EAAGY,KACHjB,GACTU,GAAQU,EAAMJ,EAAKd,GACnBM,GAAS,GACEQ,EAAKjB,EACXS,IACJI,GAAQQ,EAAMJ,EAAKf,IAGpBU,GAAUK,EAAKA,EAEhBC,GAAMX,EAiCP,OA9BKI,EAAO,IAENC,EAAO,GAASA,EAAOU,GAAmBV,GAASA,KACvDD,GAAYC,EAAOT,EAASA,GAE7Ba,EAAM,EAAMb,EACZO,EAAQC,GACGE,EAAO,EAEbD,EAAO,GAAOA,EAAOU,GAAiBV,GAASA,GACnDA,EAAOW,EAAMX,IACbC,EAAOU,EAAMV,GAASX,GACVU,GACXG,EAAOH,EACPE,EAAOD,IAEPE,EAAOF,EACPC,EAAOF,GAERI,EAAM,EACNN,EAAUI,EAAOA,GAAW,EAAMO,EAAMN,EAAOD,MAE/CE,EAAM,EAAMd,EACZQ,EAAQG,IAITG,EAAM,EACNN,EAAQE,GAEFW,EAAMb,GAAUM,CACxB,CCtFA,SAASZ,EAAOC,EAAGC,EAAGC,GAErB,OAAOiB,EAASnB,EAAGC,EAAGC,EADbkB,EAAepB,EAAGE,GAE5B,CClBAmB,EAAAtB,EAAA,UAAAoB"}